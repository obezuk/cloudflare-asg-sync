constructor = function(REQUEST, CLOUDFLARE_EMAIL, CLOUDFLARE_TOKEN) {

    lib = {};

    lib.updateLoadBalancerOriginPool = async function(identifier, name, origins) {

        var updatePoolParams = {};
        updatePoolParams.name = name;
        updatePoolParams.origins = origins;

        var options = {
            "method": "PUT",
            "uri": "https://api.cloudflare.com/client/v4/user/load_balancers/pools/" + identifier,
            "headers": {
                "X-Auth-Email": CLOUDFLARE_EMAIL,
                "X-Auth-Key": CLOUDFLARE_TOKEN,
                "Content-Type": "application/json"
            },
            "body": JSON.stringify(updatePoolParams)
        };

        try {
            var updatePoolResponseBody = await REQUEST(options);
            var updatePoolResponse = JSON.parse(updatePoolResponseBody);
            if (updatePoolResponse.success == true) {
                return updatePoolResponse.result;
            } else {
                throw {
                    'code': 500,
                    'message': 'Failed to update origin pool.',
                    'data': updatePoolParams
                };
            }
        } catch (e) {
            throw e;
        }

    }

    lib.createLoadBalancerOriginPool = async function(name, origins) {

        var newPoolParams = {};
        newPoolParams.name = name;
        newPoolParams.description = 'Automatically generated by Cloudflare Load Balancer Sync';
        newPoolParams.enabled = false;
        newPoolParams.minimum_origins = 1;
        newPoolParams.origins = origins;
        newPoolParams.notification_email = CLOUDFLARE_EMAIL;

        var options = {
            "method": "POST",
            "uri": "https://api.cloudflare.com/client/v4/user/load_balancers/pools",
            "headers": {
                "X-Auth-Email": CLOUDFLARE_EMAIL,
                "X-Auth-Key": CLOUDFLARE_TOKEN,
                "Content-Type": "application/json"
            },
            "body": JSON.stringify(newPoolParams)
        };

        try {
            var createPoolResponseBody = await REQUEST(options);
            var createPoolResponse = JSON.parse(createPoolResponseBody);
            if (createPoolResponse.success == true) {
                return createPoolResponse.result;
            } else {
                throw {
                    'code': 500,
                    'message': 'Failed to create new origin pool.',
                    'data': newPoolParams
                };
            }
        } catch (e) {
            throw e;
        }

    }

    lib.getLoadBalancerPoolByName = async function(name) {
        const _ = require('lodash');
        var pools = await lib.listLoadBalancerPools();
        var pool = _.find(pools, {
            "name": name
        });
        return pool;
    }

    lib.listLoadBalancerPools = async function () {

        var loadBalancerPools = await REQUEST({
            "method" : "GET",
            "url": "https://api.cloudflare.com/client/v4/user/load_balancers/pools",
            "headers" : {
                "X-Auth-Email" : CLOUDFLARE_EMAIL,
                "X-Auth-Key": CLOUDFLARE_TOKEN,
                "Content-Type": "application/json"
            },
            "json" : true
        });

        return loadBalancerPools.result;
    }

    return lib;
}

module.exports = constructor;